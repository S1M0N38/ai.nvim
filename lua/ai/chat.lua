local config = require("ai.config")

local M = {}

--CreateChatCompletionRequest------------------------------------------------------------------------------------------

---@class CreateChatCompletionRequest
---@field messages ChatCompletionRequestMessage[]: A list of messages comprising the conversation so far.
---@field model string: ID of the model to use.
---@field frequency_penalty? number: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
---@field logit_bias? table: Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
---@field logprobs? boolean: Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.
---@field top_logprobs? integer: An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
---@field max_tokens? integer: The maximum number of tokens that can be generated in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length.
---@field n? integer: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
---@field presence_penality? number: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
---@field response_format? string: An object specifying the format that the model must output. Compatible with `gpt-4-1106-preview` and `gpt-3.5-turbo-1106`. Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON. **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length. Must be one of `{ "type": "text" }` or `{ "type": "json_object" }`.
---@field seed? integer: This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
---@field stop? string|string[]: Up to 4 sequences where the API will stop generating further tokens.
---@field stream? boolean: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
---@field suffix? string: The suffix that comes after a completion of inserted text.
---@field temperature? number: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.
---@field top_p? number: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or `temperature` but not both.
---@field tools? ChatCompletionTool[]: A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
---@field tool_choice? ChatCompletionToolChoiceOption: Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function. `none` is the default when no functions are present. `auto` is the default if functions are present.
---@field user? string: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.

---@alias ChatCompletionRequestMessage
---| ChatCompletionRequestSystemMessage
---| ChatCompletionRequestUserMessage
---| ChatCompletionRequestAssistantMessage
---| ChatCompletionRequestToolMessage
---
---@class ChatCompletionRequestSystemMessage
---@field content string: The contents of the system message.
---@field role string: The role of the messages author, in this case `system`.
---@field name? string: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
---
---@class ChatCompletionRequestUserMessage
---@field content string: The text contents of the message. Or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.
---@field role string: The role of the messages author, in this case `user`.
---@field name? string: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
---
---@class ChatCompletionRequestAssistantMessage
---@field content? string: The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
---@field role string: The role of the messages author, in this case `assistant`.
---@field name? string: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
---@field tool_calls? ChatCompletionMessageToolCall[]: The tool calls generated by the model, such as function calls.
---
---@class ChatCompletionMessageToolCall
---@field id string: The ID of the tool call.
---@field type string: The type of the tool. Currently, only `function` is supported.
---@field function ChatCompletionMessageToolCallFunction: The function that the model called.
---
---@class ChatCompletionMessageToolCallFunction
---@field name string: The name of the function to call.
---@field arguments table: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
---
---@class ChatCompletionRequestToolMessage
---@field role string: The role of the messages author, in this case `tool`.
---@field content string: The contents of the tool message.
---@field tool_call_id string: Tool call that this message is responding to.

---@class ChatCompletionTool
---@field type string: The type of the tool. Currently, only `function` is supported.
---@field function FunctionObject
---
---@class FunctionObject
---@field description? string: A description of what the function does, used by the model to choose when and how to call the function.
---@field name string:The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
---@field parameters? FunctionParameters
---
---@alias FunctionParameters table: The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. Omitting `parameters` defines a function with an empty parameter list.

---@alias ChatCompletionToolChoiceOption
---| string: `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
---| ChatCompletionNamedToolChoice
---
---@class ChatCompletionNamedToolChoice
---@field type string: The type of the tool. Currently, only `function` is supported
---@field function ChatCompletionNamedToolChoiceFunction
---
---@class ChatCompletionNamedToolChoiceFunction
---@field name string: The name of the function to call.

-----------------------------------------------------------------------------------------------------------------------

--CreateChatCompletionResponse-----------------------------------------------------------------------------------------

---@class CreateChatCompletionResponse
---@field id string: A unique identifier for the chat completion.
---@field choices ChatCompletionResponseChoice[]: A list of chat completion choices. Can be more than one if `n` is greater than 1.
---@field created integer: The Unix timestamp (in seconds) of when the chat completion was created.
---@field model string: The model used for the chat completion.
---@field system_fingerprint? string: This fingerprint represents the backend configuration that the model runs with. Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
---@field object string: The object type, which is always `chat.completion`.
---@field usage? CompletionUsage: Usage statistics for the completion request.
---
---@class ChatCompletionResponseChoice
---@field finish_reason string: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
---@field index integer: The index of the choice in the list of choices.
---@field message ChatCompletionResponseMessage: A chat completion message generated by the model.
---@field logprobs? ChatCompletionResponseChoiceLogprobs: Log probability information for the choice. This is always return by OpenAI API, but not in alternative implementations.
---
---@class ChatCompletionResponseMessage
---@field content string: The contents of the message.
---@field tool_calls? ChatCompletionMessageToolCall[]: The tool calls generated by the model, such as function calls.
---@field role string: The role of the author of this message.
---
---@class ChatCompletionResponseChoiceLogprobs
---@field content ChatCompletionTokenLogprob[]: A list of message content tokens with log probability information.
---
---@class ChatCompletionTokenLogprob
---@field token string: The token.
---@field logprob number: The log probability of this token.
---@field bytes integer[]: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
---@field top_logprobs ChatCompletionTokenLogprobTopLogprobs[]: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
---
---@class ChatCompletionTokenLogprobTopLogprobs
---@field token string: The token.
---@field logprob number: The log probability of this token.
---@field bytes integer[]: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
---
---@class CompletionUsage
---@field completion_tokens integer: Number of tokens in the generated completion.
---@field prompt_tokens integer: Number of tokens in the prompt.
---@field total_tokens integer: Total number of tokens used in the request (prompt + completion).

-----------------------------------------------------------------------------------------------------------------------

--CreateChatCompletionStreamResponse-----------------------------------------------------------------------------------

---@class CreateChatCompletionStreamResponse
---@field id string: A unique identifier for the chat completion. Each chunk has the same ID.
---@field choices ChatCompletionStreamResponseChoice[]: A list of chat completion choices. Can be more than one if `n` is greater than 1.
---@field created integer: The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
---@field model string: The model used for the chat completion.
---@field system_fingerprint? string: This fingerprint represents the backend configuration that the model runs with. Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
---@field object string: The object type, which is always `chat.completion`.
---
---@class ChatCompletionStreamResponseChoice
---@field delta ChatCompletionStreamResponseDelta: A chat completion delta generated by streamed model responses.
---@field logprobs? ChatCompletionResponseChoiceLogprobs: Log probability information for the choice.
---@field finish_reason string: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
---@field index integer: The index of the choice in the list of choices.
---
---@class ChatCompletionStreamResponseDelta
---@field content? string: The contents of the chunk message.
---@field tool_calls? ChatCompletionMessageToolCallChunk[]: The tool calls generated by the model, such as function calls.
---@field role? string: The role of the author of this message.
---
---@class ChatCompletionMessageToolCallChunk
---@field index integer: The index of the tool call.
---@field id string: The ID of the tool call.
---@field type string: The type of the tool. Currently, only `function` is supported.
---@field function ChatCompletionMessageToolCallFunction: The function that the model called.

-----------------------------------------------------------------------------------------------------------------------

---Creates a model response for the given chat conversation.
---@param req CreateChatCompletionRequest: The request to send to the API.
---@param buf integer: The buffer to write the response to.
---@param callback? fun(res: CreateChatCompletionResponse) A callback function that will be called when the response is received.
---@return integer: The job ID of the curl process.
M.chat_completion = function(req, buf, callback)
  req.stream = false -- force non-streaming response
  local args = {
    "--silent",
    '--header "content-type: application/json"',
    '--header "Authorization: Bearer $OPENAI_API_KEY"',
    "--url " .. config.options.base_url .. "/chat/completions",
    "--data " .. vim.fn.shellescape(vim.fn.json_encode(req)),
  }
  local cmd = "curl " .. table.concat(args, " ")
  local on_stdout = function(_, data, _)
    ---@type CreateChatCompletionResponse
    local res = vim.fn.json_decode(table.concat(data, ""))
    local content = res.choices[1].message.content
    local lines = vim.split(content, "\n")
    vim.api.nvim_buf_set_lines(buf, 0, -1, true, lines)
    if callback then
      callback(res)
    end
  end
  local job = vim.fn.jobstart(cmd, {
    clear_env = true,
    env = { OPENAI_API_KEY = os.getenv(config.options.env_var) },
    on_stdout = on_stdout,
    stdout_buffered = true,
  })
  return job
end

return M
